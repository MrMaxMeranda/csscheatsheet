SELECTORS:
BACKGROUND

background 		[<background-image> ||
			 <background-position>
			     [ / <background-size>]? ||
			 <background-repeat> ||
			 <background-attachment> ||
			 <background-clip>{1,2} ||
			 <color>]*
			<background-image> ||
			<background-position>
			    [ / <background-size>]? ||
			<background-repeat> ||
			<background-attachment> ||
			<background-clip> ||
			<background-clip> ||
			<color>]*
background-attachment   scroll | fixed | local
background-blend-mode	normal | multiply | screen |
			overlay | darken | lighten |
			color-dodge | color-burn |
			hard-light | soft-light | 
			difference | exclusion | hue |
			saturation | color | luminosity
background-clip         border-box | padding-box |
                        content-box
background-color        <color>
background-image        <image> | none
background-origin       border-box | padding-box |
                        content-box
background-position     top left | top center | top
                        right | center left | center
                        center | center right |
                        bottom left | bottom center
                        | bottom right
                        <x-percent> <y-percent>
                        <x-pos> <y-pos>
background-repeat       repeat-x | repeat-y |
			[repeat | space | round |
			  no-repeat]{1,2}
background-size         [<length-percentage> |
			         auto ]{1,2} |
			cover | contain

BORDER

border            	<border-width>
                        <border-style>
                        <color>
border-bottom           <border-bottom-width>
                        <border-style>
                        <color>
border-bottom-color     <color>
border-bottom-style     <border-style>
border-bottom-width     <border-width>
border-collapse         collapse | separate
border-color            <color>
border-image            <image> ||
			<border-image-slice> [ /|
			  <border-image-width> /|
			  <border-image-outset>]? ||
			<border-image-repeat>
                        none
border-image-slice	<number-percent>{1,4} && fill
			/* 1 Value: 4 corners
			   2 Value: vert and horiz
			   4 Value: top right bottom left
			   fill: can be between any value */
border-image-source	<image>
border-image-repeat	[stretch | repeat | round |
			 space]{1,2}
border-image-width	[<length-percentage> |
			 <number> |
			 <auto>]{1,4}
border-image-outset	[<length> | <number>{1,4}
border-left             <border-left-width>
                        <border-style>
                        <border-color>
border-left-color       <color>
border-left-style       <border-style>
border-left-width       <border-width>
                        <length>
border-right            <border-right-width>
                        <border-style>
                        <border-color>
border-right-color      <color>
border-right-style      <border-style>
border-right-width      <border-width>
border-top              border-top-width
                        border-style
                        border-color
border-top-color        border-color
border-top-style        border-style
border-top-width        <border-width>
border-width            <length> | thin | medium | thick
border-radius           <length-percentage>{1,4}
border-top-right-radius <length-percentage>
border-bottom-right-radius <length-percentage>
border-bottom-left-radius <length-percentage>
border-top-left-radius  <length-percentage>
box-shadow              none | [ inset? && <length>{2,4} &&
				 <color>?]
			/* Value 1: offset-x
			   Value 2: offset-y
			   Value 3: blur radius
			   Value 4: spread radius */
border-style            none | hidden | dotted |
                        dashed | solid | double |
                        groove | ridge | inset |
                        outset
FONT

font                    [[<font-style> ||
                          [ normal | small-caps ] ||
                            <font-weight> ||
			    <font-stretch>]?
                          <font-size> [/<line-height>]?
                          <font-family>] |
                        caption | icon | menu |
                        message-box | small-caption |
			status-bar
font-family             [[<string> | <custom-ident>+] |
			 serif | sans-serif | cursive |
			 fantasy | monospace]#
font-size               larger | smaller |
			xx-small | x-small | small |
                        medium | large | x-large |
                        xx-large |
                        <length-percentage>
font-size-adjust        none | <number>
font-stretch            normal | wider | narrower |
                        ultra-condensed |
			extra-condensed | condensed |
                        semi-condensed | semi-expanded |
			expanded | extra-expanded |
			ultra-expanded
font-style              normal | italic | oblique
font-synthesis		none | [ weight || style ]
font-variant            normal | none |
			[ <font-variant-ligatures> ||
			  stylistic( <custom-ident> ) ||
			  historical-forms ||
			  styleset( <custom-ident># ) ||
			  character-variant( <custom-ident># ) ||
			  swash( <custom-ident> ) ||
			  ornaments( <custom-ident> ) ||
			  annotation( <custom-ident> ) ||
			  <font-variant-caps> ||
			  [ lining-nums | oldstyle-nums ] ||
			  [ proportional-nums | tabular-nums ] ||
			  [ diagonal-fractions | stacked-fractions ] ||
			  ordinal || slashed-zero ||
			  <font-variant-east-asia>
			<font-variant-ligatures> ||
			<font-variant-caps> ||
			<font-variant-numeric> ||
			<font-variant-alternatives> ||
			<font-variant-east-asian>]
font-variant-caps	normal | small-caps |
			all-small-caps | petite-caps |
			fall-petite-caps | unicase |
			titling-caps
font-variant-numeric	normal | [
			 [ lining-nums | oldstyle-nums ] ||
			 [ proportional-nums |
			   tabular-nums ] ||
			 [ diagonal-fractions |
			   stacked-fractions ] ||
			 ordinal || slashed-zero ]
font-variant-alternates	normal |
			[ stylistic( <custom-ident> ) ||
			  historical-forms ||
			  styleset( <custom-ident># ) ||
			  character-variant( <custom-ident># ) ||
			  swash( <custom-ident> ) || 
			  ornaments( <custom-ident> ) || 
			  annotation( <custom-ident> ) ]
font-variant-ligatures	normal | none |
			[ [ common-ligatures |
			    no-common-ligatures ] ||
			  [ discretionary-ligatures |
			    no-discretionary-ligatures ] ||
			  [ historical-ligatures |
			    no-historical-ligatures ] ||
			  [ contextual | no-contextual ] ]
font-weight             normal | bold | bolder |
                        lighter | 100 | 200 | 300 |
                        400 | 500 | 600 | 700 | 800
                        | 900
BOX MODEL

clear                   none | left | right | both |
			inline-start | inline-end
display       		/* outside */
			block | inline | run-in |
			/* inside */
			flow | flow-root | table | flex |
			grid | ruby |subgrid |
			/* inside and outside */
			block flow | inline table |
			flex run-in |
			/* list item */
			list-item | list-item block |
			list-item inline | list-item flow |
			list-item flow-root |
			list-item block flow |
			list-item block flow-root |
			flow list-item block |
			/* internal */
			table-row-group | table-header-group |
			table-footer-group | table-row |
			table-cell | table-column-group |
			table-column | table-caption |
			ruby-base | ruby-text |
			ruby-base-container |
			ruby-text-container |
			/* box */
			contents | none
			/* legacy */
			inline-block | inline-table |
			inline-flex | inline-grid
float                   left | right | none |
			inline-start | inline-end
height                  <length-percentage> &&
			[ border-box | content-box ]? |
			available | min-content |
			max-content | fit-content |
			auto
max-height              <length-percentage> | none |
			max-content | min-content |
			fit-content | fill-available
max-width               <length-percentage> | none |
			max-content | min-content |
			fit-content | fill-available
min-height              <length-percentage> | none |
			max-content | min-content |
			fit-content | fill-available
min-width               <length-percentage> | none |
			max-content | min-content |
			fit-content | fill-available
width                   <length-percentage> &&
			[ border-box | content-box ]? |
			available | min-content |
			max-content | fit-content |
			auto
margin                  [ <length-percentage> | auto ]{1,4}
			/* 1 value: all 4 sides
			   2 values: top-bottom, left-right
			   3 values: top, left-right, bottom
			   4 values: top, right, bottom, left */
margin-bottom           <length-percentage> | auto
margin-left             <length-percentage> | auto
margin-right            <length-percentage> | auto
margin-top              <length-percentage> | auto
padding                 [ <length-percentage> | auto ]{1,4}
			/* 1 value: all 4 sides
			   2 values: top-bottom, left-right
			   3 values: top, left-right, bottom
			   4 values: top, right, bottom, left */
padding-bottom          <length-percentage>
padding-left            <length-percentage>
padding-right           <length-percentage>
padding-top             <length-percentage>
overflow                visible | hidden | scroll | auto 
visibility              visible | hidden | collapse

TEXT

direction               ltr | rtl
letter-spacing          normal | <length>
text-align              start | end | left | right |
                        center | justify | match-parent
text-align-last         start | end | left | right |
                        center | justify | auto
text-decoration         none
			<text-decoration-line> ||
			<text-decoration-color> ||
			<text-decoration-style>
text-decoration-line	none | [ underline || 
				 overline ||
				 line-through ||
				 blink ] 
text-decoration-color	<color>
text-decoration-style	solid | double | dotted |
			dashed | wavy
text-emphasis           <text-emphasis-style> ||
			<text-emphasis-color>
text-emphasis-position	[over | under] &&
			[right | left]
text-emphases-color	<color>
			transparent
text-emphasis-style	none | [ [ filled | open ] ||
			[ dot | circle | double-circle |
			  triangle | sesame ] ] |
			<string>
text-indent             <length-percentage> &&
			hanging && each-line
text-justify            none | auto | inter-word |
			inter-character
text-shadow             none | [ <length>{2,3} && <color>?]
			/* Values 1: Offset-X
				     Offset-Y
				     Blur-Radius */
text-transform          none | capitalize | uppercase
                        | lowercase | full-width
unicode-bidi            normal | embed | bidi-override |
			isolate | isolate-override |
			plaintext
white-space             normal | pre | nowrap |
			pre-wrap | pre-line
word-break              normal | keep-all | break-all
word-spacing            normal | <length-percentage>
overflow-wrap           normal | break-word

TABLE

border-collapse         collapse | separate
border-spacing          <length> <length>?
			/* 1 value: horiz-vert
			   2 value: <horiz> <vert> */
caption-side            top | bottom | block-start |
			block-end | inline-start |
			inline-end
empty-cells             show | hide
table-layout            auto | fixed
vertical-align		baseline | sub | super |
			text-top | text-bottom |
			middle | top | bottom |
			<length-percentage>

COLUMN

column-count            auto | <integer>
column-fill             auto | balance | balance-all
column-gap              normal | <length-percentage>
column-rule             <column-rule-width> ||
			<column-rule-style> ||
			<column-rule-color>
column-rule-color       <color>
column-rule-style       <border-style>
column-rule-width       <border-width>
columns                 <column-width> || <column-count>
column-span             none | all
column-width            auto | <length>

COLOR

color                   <color>
opacity                 <number>
			/* 0 to 1 */

LIST & MARKERS

list-style              <list-style-type> ||
			<list-style-image> ||
                        <list-style-position>
list-style-image        none | <url>
list-style-position     inside | outside
list-style-type         none |<string> | symbols()
			/* <string> examples:
				circle | decimal |
				lower-roman |
				upper-roman |
				lower-alpha |
				upper-alpha |
				lower-greek |
				lower-latin */
			/* symbols() example:
			   list-style-sype:
			    symbols(cyclic
			            "*" "†" "‡");*/
			/* Types:
				cyclic, numeric,
				alphabet, symbolic,
				fixed */

ANIMATIONS

animation               [<animation-name> ||
                         <animation-duration> ||
                         <animation-timing-function> ||
                         <animation-delay> ||
                         <animation-iteration-count> ||
                         <animation-direction>]#
animation-delay         <time>
animation-direction     [normal | alternate | reverse |
			alternate-reverse]#
animation-duration      <time>#
animation-fill-mode	[none | forwards | backwards |
			both]#
animation-iteration-count [infinite | <number>]#
animation-name          none | [<custom-ident> | <string>]#
animation-play-state    running | paused
animation-timing-function [linear |
			   [ease | ease-in | ease-out |
			    ease-in-out |
			    cubic-bezier(<number>,
			    		 <number>,
					 <number>,
					 <number>)] |
			  [step-start | step-end |
			   steps(<integer>[,[start|end]]?] |
			  frames(<integer>)

TRANSITIONS

transition              <transition-property>
                        <transition-duration>
                        <transition-timing-function>
                        <transition-delay>
transition-delay        <time>#
transition-duration     <time>#
transition-property     [none | all | <custom-ident>]#
transition-timing-function [ linear |
			     ease | ease-in |
			     ease-out | ease-in-out |
			     cubic-bezier(<number>,
			     		  <number>,
					  <number>,
					  <number>) |
			     step-start | step-end |
			     steps(<integer>[, [start |
			     			end]]?) |
			     frames(<integer>)]
OUTLINE

outline*		<outline-width> ||
                        <outline-style> ||
			<outline-color>
outline-color           <color> | invert
outline-offset          <length>
outline-style           none | auto | dotted | dashed |
                        solid | double | groove |
                        ridge | inset | outset
outline-width           thin | medium | thick | <length>

3D / 2D TRANSFORM

backface-visibility     visible | hidden
perspective             none | <length>
perspective-origin      left | center | right | top |
			bottom | <percent> <length>
			center | top | bottom | <percent>
			<length>
transform               none |
			[ matrix( <number>
			     [, <number> ]{5,5} ) ||
			  translate( <length-percentage> ||
			          [, <length-percentage> ]? ) ||
			  translateX( <length-percentage> ) ||
			  translateY( <length-percentage> ) ||
			  scale( <number> [, <number> ]? ) ||
			  scaleX( <number> ) ||
			  scaleY( <number> ) ||
			  rotate( <angle> ) ||
			  skew( <angle> [, <angle> ]? ) ||
			  skewX( <angle> ) ||
			  skewY( <angle> ) ||
			  matrix3d( <number> [, <number> ]
			            {15,15} ) ||
			  translate3d( <length-percentage>,
			   <length-percentage> , <length> ) ||
			  translateZ( <length> ) ||
			  scale3d( <number> , <number> ,
			           <number> ) ||
			  scaleZ( <number> ) ||
			  rotate3d( <number> , <number> ,
			            <number> , <angle> ) ||
			  rotateX( <angle> ) ||
			  rotateY( <angle> ) ||
			  rotateZ( <angle> ) ||
			  perspective( <length> )]+

transform-origin        [ [ [ <percentage> |
                        <length> | left | center |
                        right ] [ <percentage> |
                        <length> | top | center |
                        bottom ]? ] <length> ] |
                        [ [ [ left | center | right ] ||
                        [ top | center | bottom ] ]
                        <length> ]
			[ <length-percentage> | left |
			  center | right | top | bottom ] |
			[ [ <length-percentage> | left |
			    center | right ]
			[ <length-percentage> | top |
			   center | bottom ] ] <length>?
transform-style         flat | preserve-3d

GENERATED CONTENT

content                 normal | none |
			[ counter(<counter-increment>) |
			  <attr()> | <string> |
			  open-quote | close-quote |
			  no-open-quote |
			  no-close-quote | <image> ]+
counter-increment       none |
                        [ <custom-ident> <integer>? ]+
counter-reset           none |
                        [ <custom-ident> <integer>? ]+
hyphens                 none | manual | auto
quotes                  none |
                        [ <string> <string> ]+

LINE BOX

line-height             normal | <number> |
			<length-percentage>
vertical-align          baseline | sub | super | top
                        | text-top | middle | bottom
                        | text-bottom |
			<length-percentage>

POSITIONING

bottom                  auto | <length-percentage>
left                    auto | <length-percentage>
position                static | relative | absolute |
                        fixed
right                   auto | <length-percentage>
top                     auto | <length-percentage>
z-index                 auto <integer>

PAGED MEDIA

image-orientation       from-image | <angle> |
			[<angle>? flip]
			/* from-image uses EXIF data
			   contined in the image */
orphans                 <integer>
page-break-after        auto | always | avoid | left |
                        right
page-break-before       auto | always | avoid | left |
                        right
page-break-inside       auto | avoid
windows                 <integer>

UI

cursor                  [[ <url> [ <x> <y> ]? , ]*
			 [ auto | default | none |
			   context-menu | help |
			   pointer | progress | wait |
			   cell | crosshair | text |
			   vertical-text | alias |
			   copy | move | no-drop |
			   not-allowed | e-resize |
			   n-resize | ne-resize |
			   nw-resize | s-resize |
			   se-resize | sw-resize |
			   w-resize | ew-resize |
			   ns-resize | nesw-resize |
			   nwse-resize | col-resize |
			   row-resize | all-scroll |
			   zoom-in | zoom-out | grab |
			   grabbing ]]
resize                  none | both | horizontal |
                        vertical

PSEUDO-CLASS

:active			represents an element (such as
			a button) that is being
			activated by the user. When
			using a mouse, "activation"
			typically starts when the user
			presses down the primary mouse
			button and ends when it is
			released. The :active
			pseudo-class is commonly used
			on <a> and <button> elements,
			but may be used on other
			elements, too.
:checked		represents any <radio>,
			<checkbox>, or <option> element
			that is checked.
:default		any form element that is the
			default among a group of
			related elements.
:disabled               represents any disabled element
:empty                  an element that has no children
:enabled                represents any enabled element.
			An element is enabled if it can
			be activated (selected, clicked
			on, typed into, etc.) or accept
			focus.
:first			used with the  @page at-rule,
			represents the first page of a
			printed document.
:first-child            represents the first element
			among a group of sibling
			elements.
:first-of-type          represents the first element of
			its type among a group of
			sibling elements.
:focus                  represents an element (such as
			a form input) that has received
			focus.
:hover                  an element when you mouse over
			it
:indeterminate		represents any form element
			whose state is indeterminate.
:in-range		represents an <input> element
			whose current value is within
			the range limits specified by
			the min and max attributes.
:invalid		represents any <input> or other
			<form> element whose contents
			fail to validate.
:lang(<lang>)           Allows the author to specify a
			language to use in a specified
			element an element that is the
			n-th sibling
:last-child             represents the last element
			among a group of sibling
			elements.
:last-of-type           represents the last element of
			its type among a group of
			sibling elements.
:left			used with the @page at-rule,
			represents all left-hand pages
			of a printed document.
:link                   an unvisited link.
:not(<element>)         represents elements that do not
			match a list of selectors
:nth-child(<nth>)       an element that is the n-th
			sibling counting from the last
			sibling.
:nth-last-child(<nth>)  an element that is the last
			sibling.
:nth-last-of-type(<nth>)an element that is the n-th
			sibling of its type counting
			from the last sibling.
:nth-of-type(<nth>)     an element that is the n-th
			sibling of its type.
:only-child             an element that is the only
			child.
:only-of-type           an element that is the only
			child of that type
:optional		represents any <input>,
			<select>, or <textarea> element
			that does not have the required
			attribute set on it.
:out-of-range		represents an <input> element
			whose current value is outside
			the range limits specified by
			the min and max attributes.
:read-only		represents an element (such as
			a locked text input) that is
			not editable by the user.
:read-write		represents an element (such as
			a text input) that is editable
			by the user.
:required		represents any <input>,
			<select>, or <textarea> element
			that has the required attribute
			set on it.
:right			used with the  @page at-rule,
			represents all right-hand pages
			of a printed document.
:root                   root element within the
			document. It represents the
			<html> element and is identical
			to the selector html, except
			that its specificity is higher.
:scope			represents elements that are a
			reference point for selectors
			to match against.
:target			represents a unique element
			(the target element) with an id
			matching the URL's fragment.
:valid			represents any <input> or other
			<form> element whose contents
			validate successfully.  This
			allows to easily make valid
			fields adopt an appearance that
			helps the user confirm that
			their data is formatted
			properly.
:visited		represents links that the user
			has already visited. For
			privacy reasons, the styles
			that can be modified using this
			selector are very limited.

PSEUDO-ELEMENT

::after                 Inserts some content after an
                        element
::before                Inserts some content before
                        an element
::cue			Matches WebVTT cues within a
			selected element
::first-letter          applies styles to the first
			letter of the first line of a
			block-level element, but only
			when not preceded by other
			content (such as images or
			inline tables).
::first-line            applies styles to the first
			line of a block-level element.
			Note that the length of the
			first line depends on many
			factors, including the width of
			the element, the width of the
			document, and the font size of
			the text.
::selection		Applies styles to the portion
			of a document that has been
			highlighted.

UNITS

<length-percentage>	<length> | <percentage>
<percentage>		consists of a <number> followed
			by the percentage sign (%).
			Optionally, it may be preceded
			by a single + or - sign,
			although negative values are
			not valid for all properties.
			As with all CSS dimensions,
			there is no space between the
			symbol and the number.

ABSOLUTE MEASUREMENT

px			Traditionally one device pixel.
mm                      millimeter
cm                      centimeter
in                      inch
pt                      point (1pt = 1/72 inch)
pc                      pica (1p = 12 points)

RELATIVE MEASUREMENT

ch                      width of the "0" glyph found in
                        the font for the font size used
			to render
em                      1em = current font size of
                        current element
ex                      x-height of the element's font
gd                      the grid defined by 'layout-grid'
px                      pixel of the viewing device
rem                     the font size of the root element
vh                      the viewport's height
vw                      the viewport's width
vm                      viewport's height or width,
                        whichever is smaller of the two

ANGLES

deg                     degrees
grad                    grads
rad                     radians
turn                    turns

TIME

ms                      milli-seconds
s                       seconds

FREQUENCY

Hz                      hertz
kHz                     kilo-hertz

COLORS

color name              red, blue, green, dark green
rgb(x,y,z)              red = rgb(255,0,0)
rgb(x%,y%,z%)           red = rgb(100%,0,0)
rgba(x,y,z, alpha)      red = rgba(255,0,0,1)
#rrggbb                 red = #ff0000 (or shorthand =
                        #f00)
hsl(hue, saturation,    red = hsl(0, 100%, 50%)
lightness)
hsla(hue, saturation,   red = hsl(0, 100%, 50%)
lightness, alpha)
flavor                  An accent color (typically chosen
                        by the user) to customize the
                        user interface of the user agent
                        itself
currentColor            computed value of the
                        'currentColor' keyword is the
                        computed value of the 'color'
                        property

SELECTOR TYPES

Universal   Any element       * { font: 10px Arial; }
Type        Any element of    h1 { text-decoration:
            that type         underline; }
Grouping    Multiple          h1, h2, h3 { font-family:
            elements of       Verdana; }
            different types
Class       Multiple          .sampleclass
            elements of       { text-decoration:
            different types   underline; }
            when you don’t
            want to affect
            all instances of
            that type
Id          A single          #sampleid
            element type      { textdecoration:
            when you don’t      underline; }
            want to affect
            all instances of
            that type
Descendant  An element that   #gallery h1
            is below (in the  { textdecoration:
            document tree)      underline; }
            another
            element—no
            matter how
            many levels
            below
Child       An element that   #title > p { font-weight:
            is directly below              bold; }
            (in the
            document tree)
            another
            element
Adjacent    All elements      h1 + p { font-style:
Sibling     that share the             italic; }
            same parent
            and elements
            are in the same
            immediate
            sequence
General     All elements      h1 ~ p { font-style:
Sibling     that share the             italic; }
            same parent
            and elements
            are in the same
            sequence (not
            necessarily
            immediate)
Attribute   An element with   E[selected] - att whatever
            that matches      the value
            the attribute     E[att="val"] - att with a
            listed            specific value
                              E[rel~="next"] - att with
                              a value is a whitespace
                              separated list
                              *[lang|="en"] - att value
                              either being exactly "val"
                              or beginning with "val"
                              immediately followed by
                              "-"
                              E[att^="val"] - att value
                              that begins with the prefix
                              "val"
                              E[att$="val"] - att value
                              that end with the suffix
                              "val"
                              E[att*="val"] - att value
                              contains at least one
                              instance of the substring
                              "val"
Functions:
attr()		attr( <attr-name> <type-or-unit>? [,
		<attr-fallback> ]? )

		where 
		<type-or-unit> = string | integer |
		color | url | integer | number | length
		| angle | time | frequency | em | ex |
		px | rem | vw | vh | vmin | vmax | mm |
		q | cm | in | pt | pc | deg |
		grad | rad | ms | s | Hz | kHz | %
